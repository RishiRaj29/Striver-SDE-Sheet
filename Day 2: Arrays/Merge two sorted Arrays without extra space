// Solution->

/* 

Algorithm->

Initially take the gap as (m+n)/2;

Take as a pointer1 = 0 and pointer2 = gap.

Run a oop from pointer1 &  pointer2 to  m+n and whenever arr[pointer2]<arr[pointer1], just swap those.

After completion of the loop reduce the gap as gap=gap/2.

Repeat the process until gap>0.

*/

// Difficult approach is to use arrays as then the space is restricted

class Solution{

    public:
   
        void merge(long long arr1[], long long arr2[], int n, int m) 
        { 
            int gap=ceil((float)(n+m)/2);
            
            int i=0,j=gap;
	    
            while(gap)
            {
                j=gap;i=0;
		
                while(j<n) // when i and j lie in the first array
                {
                    if(arr1[i]>arr1[j])
                        swap(arr1[i],arr1[j]);
                    i++;
                    j++;
                }
		
                if(j>=n) // when j's range in first array ends then it has to start from the second array's start
                {
                    j=j-n;
                }
		
                while(j<m) // when i is in first array and j is in second array
                {
                    if(arr1[i]>arr2[j])
                        swap(arr1[i],arr2[j]);
                    i++;
                    j++;
		    
                    if(i==n) // when j's range in first array ends then it has to start from the second array's start
                    {
                        i=0;
                        break;
                    }
                }
		
                while(j<m) // when i and j both are in the range of second array
                {
                    if(arr2[i]>arr2[j])
                        swap(arr2[i],arr2[j]);
                    i++;
                    j++;
                }
		
                if(gap==1)
                    gap=0;
                else
                    gap=ceil((float)gap/2);
		    
            }
        } 
};


// An easy approach is to use vectors

vector<int> ninjaAndSortedArrays(vector<int>& arr1, vector<int>& arr2, int m, int n) {

	// Write your code here.
    int k=m,l=0;
    for(l=n-1,k=arr1.size()-1;l>=0;l--,k--)
        arr1[k]=arr2[l];
    
    int i,gap=ceil((float)arr1.size()/2),j;
    
    while(gap>0)
    {
        for(i=0,j=gap;j<arr1.size();i++,j++)
        {
             if(arr1[j]<arr1[i])
                 swap(arr1[j],arr1[i]);
        }
        if(gap==1)
            gap=0;
        else
            gap=ceil((float)gap/2);
    }
    return arr1;
}
