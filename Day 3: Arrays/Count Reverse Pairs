class Solution {
public:
    int merge(vector<int> &nums,int left,int mid,int right)
    {
    
        int i=left,j=mid+1,count=0;
        
        for(i=left;i<=mid;i++)
        {
        
            while(j<=right and nums[i]>2LL * nums[j])
                j++;
                
            count+=j-(mid+1);
            
        }
        
        i=left,j=mid+1;
        
        vector<int> temp;
        
        while(i<=mid and j<=right)
        {
        
            if(nums[i]<nums[j])
            {
                temp.push_back(nums[i]);
                i++;
            }
            
            else
            {
                temp.push_back(nums[j]);
                j++;
            }
        }
        
        while(i<=mid)
        {
            temp.push_back(nums[i]);
            i++;
        }
        
        while(j<=right)
        {
            temp.push_back(nums[j]);
            j++;
        }
        
        int k=left;
        
        for(auto ele:temp)
        {
            nums[k]=ele;
            k++;
        }
        
        return count;
    }
    
    int merge_sort(vector<int> &nums,int left,int right)
    {
        if(left==right)
            return 0;

        int mid=(left+right)/2,count=0;
        
        count+=merge_sort(nums,left,mid);
        
        count+=merge_sort(nums,mid+1,right);
        
        count+=merge(nums,left,mid,right);
        
        return count;
    }
    int reversePairs(vector<int>& nums) {
        return merge_sort(nums,0,nums.size()-1);
    }
};
