class Solution {
public:

    vector<int> maxSlidingWindow(vector<int>& nums, int k) {
    
        vector<int> ans;
        deque<pair<int,int>> deq;
        
// We use deque because -> 1) we can push and pop from both ends 
//                         2) we can maintain the chronology of the elements
        
        int i;
        
// NOTE-> We maintain a decreasing order of elements in deque
        
        for(i=0;i<k-1;i++) //Simply push elements for the first window
        {
            while(!deq.empty() and deq.back().first<nums[i])
                deq.pop_back();
            deq.push_back(make_pair(nums[i],i));
        }
        
        for(i=k-1;i<nums.size();i++)
        {
            // Remove all elements that go out of the window
            while(!deq.empty() and deq.front().second<=i-k)
                deq.pop_front();
            
// To maintain a decreasing order pop elements from back until < nums[i]
            while(!deq.empty() and deq.back().first<nums[i])
                deq.pop_back();
            
    // Push elements into deque and push the front element which is the largest into your ans
            deq.push_back(make_pair(nums[i],i));
            ans.push_back(deq.front().first);
        }
        
        return ans;
    }
};
